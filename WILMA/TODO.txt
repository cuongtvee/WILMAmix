pd.SMi:
  Q: rethink architecture
     1-wrapper abs per mode:
     	_WILMA/SMiSTREAM.pd
	_WILMA/SMiRECORD.pd
	_WILMA/SMiPROCESS.pd
      streamer:
      	_WILMA/STREAMERrtp.pd transport:udp transPort:0 profile:L16 channels:4
				bufsize:0 dacoffset:0

	abstraction: adc2send (multichannel)


RTPclient:
  Q: implement RTP-receiver (in Pd)

RTPclient.communication:
  Q: tell RTP-server where to send data to

BUG:WILMAsm:
  Q: KeyboardInterrupt restarts Pd (on umlautO, not ferrari)

BUG:net.serverTCP:
  Q: quitting might result in: "socket.error: [Errno 104] Die Verbindung wurde vom Kommunikationspartner zur√ºckgesetzt"


BUG:modeswitching
  Q: switching between modes will send a "/<newmode>/stop" message to the SMi before "/control/load/<newmode>"
     it really should send "/<oldmode>/stop"!

------------------------------------

GUI.MIXConfig:
  Q: proxy data for external application (sendto 'host:port', recv 'port'; recv is a server)
  A: done

Proxy:
  Q: proxy data for external application (sendto 'host:port', recv 'port'; recv is a server)
  A: done

GUI.SMi/SMiConfig:
  Q: reflect current mode in "START" button
  A: done

sync:
  Q: write modules for file sync
  A: rsync

sfwrite:
  Q: write module that dumps audio to file
  A: done (via Pd)

process:
  Q: write module that runs Pd
  A: done (via Pd)

OSC:
  Q: sub-tree patterns (e.g. '/foo/' matches '/foo/bar/baz')
  A: done

RTSPserver:
  Q: if the server shuts down and a client is still listening, the server
  	segfaults once the client quits.
  A: --> run server in external program that gets shut down, once streaming is done
  A: RTSP is deprecated in favour of RTP

import:
  Q: WILMAsm.py requires 'python-psutil'?

naming:
  Q: rename WILMA to WILMA (WILMA is really only the fund that sponsors the project)
  A: done
